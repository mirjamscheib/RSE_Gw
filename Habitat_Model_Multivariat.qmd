---
title: "Habitat_Model_Multivariat"
format: html
---

# Clear R environment 
```{r}
#clear R environment -------------------------------------------
rm(list = ls())
```

# Install and load packages 
```{r}
# check for a package, install and load ---------------------------------------
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
```


# 1. Input-Data
## a. Water Depth
```{r}
# Read raster-files of water depths -------------------------------------------
depth_path <- "raster_files"

# read raster-files ----------------------------------------------------
depth_impaired <- raster(file.path(depth_path, "Idw_nyadp_ju1.tif"))
depth_restored <- raster(file.path(depth_path, "Idw_nyadp_ju1.tif"))

# Set all 0-cells to NA ----------------------------------------------------
depth_impaired[depth_impaired == 0] <- NA
depth_restored[depth_restored == 0] <- NA
```

## b. Velocity 
```{r}
# Read raster-files of velocities --------------------------------------------
v_path <- "raster_files"

# read raster-files ----------------------------------------------------
velocity_impaired <- raster(file.path(v_path, "Idw_nyadp_ju3.tif"))
velocity_restored <- raster(file.path(v_path, "Idw_nyadp_ju3.tif"))

# Set all 0-cells to NA ---------------------------------------------------
velocity_impaired[velocity_impaired == 0] <- NA
velocity_restored[velocity_restored == 0] <- NA
```


# 2. Habitat modelling 
## a. Suitability Curves 
```{r}
# Read suitability curves 
### WATER DEPTH ### ----------------------------------------------------
## HABBY Barbus adult ----------------------------------------------------
depth_barbus_path <- "Suitability_Curves_Data/RSE_Gw_HABBY/Barbus_barbus_adult_water_depth.csv" 
depth_barbus <- read.csv(depth_barbus_path, sep=";", dec=".", header = TRUE)

## HABBY Rhithrogena ----------------------------------------------------
depth_rhithrogena_path <- "Suitability_Curves_Data/Rhithrogena/HABBY_Rhitrogena_eaton_larva_depth.csv" 
depth_rhithrogena <- read.csv(depth_rhithrogena_path, sep=";", dec=".", header = TRUE)

### VELOCITY ### ----------------------------------------------------
# HABBY Barbus adult ----------------------------------------------------
v_barbus_path <- "Suitability_Curves_Data/RSE_Gw_HABBY/Barbus_barbus_adult_velocity.csv" 
v_barbus <- read.csv(v_barbus_path, sep=";", dec=".", header = TRUE)
# head(PK_FG)

## HABBY Rhithrogena ----------------------------------------------------
v_rhithrogena_path <- "Suitability_Curves_Data/Rhithrogena/HABBY_Rhithrogena_eaton_larva_velocity.csv" 
v_rhithrogena <- read.csv(v_rhithrogena_path, sep=";", dec=".", header = TRUE)
```

```{r}
# Plot suitability curves 
### WATER DEPTH ### ----------------------------------------------------
# Tanno 2012 Rhithrogena ----------------------------------------------------
plot(approxfun(depth_barbus$depth, depth_barbus$suitability, method = "linear", rule = 2), xlim = c(0,1.5), 
     main = "HABBY: Barbus barbus", col = "black",  lty = 1, lwd = 2, 
     xlab = "Depth [m]", ylab = "HS [-]")

### VELOCITY ### ----------------------------------------------------
# Tanno 2012 Rhithrogena ----------------------------------------------------
plot(approxfun(v_barbus$velocity, v_barbus$suitability, method = "linear", rule = 2), xlim = c(0,1.5), 
     main = "HABBY: Barbus barbus", col = "black",  lty = 1, lwd = 2, 
     xlab = "Velocity [m/s]", ylab = "HS [-]")

### SUBSTRATE ### ----------------------------------------------------
# Tanno 2012 Baetis ----------------------------------------------------
plot(approxfun(sub_barbus$substrate, sub_barbus$suitability, method = "linear", rule = 2), xlim = c(0,10), 
     main = "HABBY: Barbus barbis", col = "black",  lty = 1, lwd = 2, 
     xlab = "Substrate class", ylab = "HS [-]")
```


## b. Univariate HM 
### b1. water depth
```{r}
### WATER DEPTH ###
# functions to calculate HM -------------------------------------------
univariat_wd_barbus <- function(x, y = depth_barbus$depth, z = depth_barbus$suitability){
  calc(x, fun = approxfun(y, z, rule = 2))
}

univariat_wd_rhithr <- function(x, y = depth_rhithrogena$depth..m., z = depth_rhithrogena$Abundance){
  calc(x, fun = approxfun(y, z, rule = 2))
}

# ALL scenarios ----------------------------------------------------
HS_barbus_depth_impaired <- univariat_wd_barbus(depth_impaired)
HS_barbus_depth_restored <- univariat_wd_barbus(depth_restored)
HS_rhithrogena_depth_impaired <- univariat_wd_rhithr(depth_impaired)
HS_rhithrogena_depth_restored <- univariat_wd_rhithr(depth_restored)


# set coordinate system (crs) -------------------------------------------
crs(HS_barbus_depth_impaired) <- "+proj=longlat"
crs(HS_barbus_depth_restored) <- "+proj=longlat"
crs(HS_rhithrogena_depth_impaired) <- "+proj=longlat"
crs(HS_rhithrogena_depth_restored) <- "+proj=longlat"


# save as .tif -------------------------------------------
writeRaster(HS_barbus_depth_impaired, filename="results_univariate/HS_barbus_depth_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_barbus_depth_restored, filename="results_univariate/HS_barbus_depth_restored.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_depth_impaired, filename="results_univariate/HS_rhithrogena_depth_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_depth_restored, filename="results_univariate/HS_rhithrogena_depth_restored.tif", format="GTiff", overwrite=TRUE)
```

### b2. velocity
```{r}
### VELOCITY ###
# functions to calculate HM -------------------------------------------
univariat_v_barbus <- function(x, y = v_barbus$velocity, z = v_barbus$suitability){
  calc(x, fun = approxfun((y*100), z, rule = 2))
}

univariat_v_rhithr <- function(x, y = v_rhithrogena$Velocity..m.s., z = v_rhithrogena$Abundance){
  calc(x, fun = approxfun((y*100), z, rule = 2))
}

# ALL scenarios ------------------------------------------------------
HS_barbus_v_impaired <- univariat_v_barbus(velocity_impaired)
HS_barbus_v_restored <- univariat_v_barbus(velocity_restored)
HS_rhithrogena_v_impaired <- univariat_v_rhithr(velocity_impaired)
HS_rhithrogena_v_restored <- univariat_v_rhithr(velocity_restored)

# Koordinatensystem (crs) -------------------------------------------
crs(HS_barbus_v_impaired) <- "+proj=longlat"
crs(HS_barbus_v_restored) <- "+proj=longlat"
crs(HS_rhithrogena_v_impaired) <- "+proj=longlat"
crs(HS_rhithrogena_v_restored) <- "+proj=longlat"


# save as .tif -------------------------------------------
writeRaster(HS_barbus_v_impared, filename="results_univariate/HS_barbus_v_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_barbus_v_restored, filename="results_univariate/HS_barbus_v_restored.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_v_impared, filename="results_univariate/HS_rhithrogena_v_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_v_restored, filename="results_univariate/HS_rhithrogena_v_restored.tif", format="GTiff", overwrite=TRUE)
```


## c. GHSI Habitateignungsindex
```{r}
### GHSI ###
# function to calculate GHSI -------------------------------------------
ghsi_2 <- function(x, y){
  overlay(x, y, 
          sub, fun = return(sqrt(x^2*y^2)))
}

# All scenarios ------------------------------------------------------
GHSI_barbus_impaired <- ghsi_2(HS_barbus_depth_impaired, HS_barbus_v_impaired)

GHSI_barbus_restored <- ghsi_2(HS_barbus_depth_restored, HS_barbus_v_restored)

GHSI_rhithrogena_impaired <- ghsi_2(HS_rhithrogena_depth_impaired, HS_rhithrogena_v_impaired)

GHSI_rhithrogena_restored <- ghsi_2(HS_rhithrogena_depth_restored, HS_rhithrogena_v_restored)


# save as .tif -------------------------------------------
writeRaster(GHSI_barbus_impaired, filename="results_multivariate/GHSI_barbus_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_barbus_restored, filename="results_multivariate/GHSI_barbus_restored.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_rhithrogena_impaired, filename="results_multivariate/GHSI_rhithrogena_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_rhithrogena_restored, filename="results_multivariate/GHSI_rhithrogena_restored.tif", format="GTiff", overwrite=TRUE)
```

## d. GHSI classes 
```{r}
# Define the reclassification table ---------------------------------------
reclass_table <- c(0, 0.1, "poor", 
                   0.1, 0.4, "low",
                   0.4, 0.7, "medium",
                   0.7, 1.0, "high")

# Classify rasters (include.lowest = TRUE includes 0 m/s, which will be also classified as 1) ---------------------------------------
GHSI_classes_barbus_impaired <- reclassify(GHSI_barbus_impaired, reclass_table,  include.lowest = TRUE)

GHSI_classes_barbus_restored <- reclassify(GHSI_barbus_restored, reclass_table,  include.lowest = TRUE)

GHSI_classes_rhithrogena_impaired <- reclassify(GHSI_rhithrogena_impaired, reclass_table,  include.lowest = TRUE)

GHSI_classes_rhithrogena_restored <- reclassify(GHSI_rhithrogena_restored, reclass_table,  include.lowest = TRUE)

# save as .tif -------------------------------------------
writeRaster(GHSI_classes_barbus_impaired, filename="results_multivariate/GHSI_classes_barbus_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_barbus_restored, filename="results_multivariate/GHSI_classes_barbus_restored.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_rhithrogena_impaired, filename="results_multivariate/GHSI_classes_rhithrogena_impaired.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_rhithrogena_restored, filename="results_multivariate/GHSI_classes_rhithrogena_restored.tif", format="GTiff", overwrite=TRUE)
```

# 3. Post-processing
## a. Weigthed Usable Area [m2]
```{r}
# define function for WUA calculation -----------------------------------
wua <- function(x){
  cellStats(x, 'sum') * 4
}

# calculate WUA for all Q's -----------------------------------
WUA_barbus_impaired <- wua(GHSI_barbus_impaired)
WUA_barbus_restored <- wua(GHSI_barbus_restored)
WUA_rhithrogena_impaired <- wua(GHSI_rhithrogena_impaired)
WUA_rhithrogena_restored <- wua(GHSI_rhithrogena_restored)
```

## b. frequency tables
```{r}
# Erstelle Haeufigkeitstabelle 
# Tanno 2012: Rhithrogena -------------------------------------------
freq_table <- function(x){
 as.data.frame(freq(x, digit=1, useNA= "no"))
}

# All scenarios ------------------------------------------------------
freq_GHSI_barbus_impaired <- freq_table(GHSI_barbus_impaired)
freq_GHSI_barbus_restored <- freq_table(GHSI_barbus_restored)
freq_GHSI_rhithrogena_impaired <- freq_table(GHSI_rhithrogena_impaired)
freq_GHSI_rhithrogena_restored <- freq_table(GHSI_rhithrogena_restored)
```

## c. Wetted Area [m2]
```{r}
# Only for one species, as WA_tot is the same for every species
# define function for WA_tot calculation -----------------------------------
wa_tot <- function(x, column_name){
  sum(x[[column_name]]) * 4
}


# calculate feq_table for all Q's -----------------------------------
WA_barbus_impaired <- wa_tot(freq_GHSI_barbus_impaired, column_name = "count")
WA_barbus_restored <- wa_tot(freq_GHSI_barbus_restored, column_name = "count")
WA_rhithrogena_impaired <- wa_tot(freq_GHSI_rhithrogena_impaired, column_name = "count")
WA_rhithrogena_restored <- wa_tot(freq_GHSI_rhithrogena_restored, column_name = "count")
```

## d. make dataframe and .csv of calculated indices 
```{r}
# data frame WUA and HHS -------------------------------------------
results <- data.frame(Description = c("Barbus_impaired", "Barbus_restored", "Rhithrogena_impaired", "Rhithrogena_restored"), Discharge = c(5, 5, 5, 5), 
                      WUA = c(WUA_barbus_impaired, WUA_barbus_restored, WUA_rhithrogena_impaired, WUA_rhithrogena_restored), 
                      WA = c(WA_barbus_impaired, WA_barbus_restored, WA_rhithrogena_impaired, WA_rhithrogena_restored))

# write data frame into .csv file -------------------------------------------
write.csv(results, file = "results_statistics/Results_Multivariate_Habitat_Model.csv", row.names = FALSE)
```

## --- e. plot results 
```{r}
library("readr")
library("tidyr")
library("dplyr")
library("ggplot2")
# make data frame for plotting -------------------------------------------
WUA_HHS <- read_delim("results_statistics/Results_Multivariate_Habitat_Model.csv")

# make variable with WUA normal/persistent -----------------------------------
# long format to plot in facet_wrap 
WUA_normal <- WUA_HHS[ , c(1:3)]
WUA_pers_ghsi <- WUA_HHS[ , c(1,2,4)]
WUA_pers_v <- WUA_HHS[ , c(1,2,5)]

WUA <- full_join(WUA_normal, WUA_pers_ghsi, by = c("Discharge", "Description"))
WUA <- full_join(WUA, WUA_pers_v, by = c("Discharge", "Description"))

WUA_long <- pivot_longer(WUA, cols = c(WUA_normal, WUA_pers_GHSI, WUA_pers_V), names_to = "WUA", values_to = "value")


# Define a custom labelling function
my_labeller <- function(variable, value) {
  if (variable == "WUA") {
    return(c("WUA_normal" = "WUA", "WUA_pers_GHSI" = "WUA persistent GHSI", "WUA_pers_V" = "WUA persistent velocity")[value])
  } 
}

# Plot WUA ALL  -----------------------------------
WUA_results <- ggplot(WUA_long, aes(Discharge, value, col = Description)) +
  facet_wrap(WUA~Description, ncol = 3, nrow = 3, labeller = my_labeller) +
  geom_point(size = 2) +
  geom_line(lwd = 0.7) +
  labs(title = "Comparing Weightes Usable Area (WUA) of three macroinvertebrates", x = expression(paste("Discharge [", m^3/s, "]")), y = "WUA", col = "Macroinvertebrates") +
  theme_gray()
```

```{r}
# save plots into .png
# set the dimensions of the quadrat
quadrat_width <- 30 # in cm
quadrat_height <- 25 # in cm

# WUA 
ggsave(filename = "results_statistics/WUA_results.png",plot = WUA_results, width = quadrat_width, height = quadrat_height, units = "cm")
```






