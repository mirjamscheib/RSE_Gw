---
title: "Habitat_Model_Multivariat"
format: html
---

# Clear R environment 
```{r}
#clear R environment -------------------------------------------
rm(list = ls())
```

# Install and load packages 
```{r}
# check for a package, install and load ---------------------------------------
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("sf")
```


# 1. Input-Data
## a. Water Depth
```{r}
# Read raster-files of water depths -------------------------------------------
depth_path <- "raster_files"

# read raster-files ----------------------------------------------------
depth_impaired_0106 <- raster(file.path(depth_path, "Impaired_0106_depth_pos.tif"))
depth_impaired_0805 <- raster(file.path(depth_path, "Impaired_0805_depth_pos.tif"))
depth_restored_0106 <- raster(file.path(depth_path, "Restored_0106_depth_pos.tif"))
depth_restored_0805 <- raster(file.path(depth_path, "Restored_0805_depth_pos.tif"))
```

## b. Velocity 
```{r}
# Read raster-files of velocities --------------------------------------------
v_path <- "raster_files"

# read raster-files ----------------------------------------------------
velocity_impaired_0106 <- raster(file.path(v_path, "Impaired_0106_velocity.tif"))
velocity_impaired_0805 <- raster(file.path(v_path, "Impaired_0805_velocity.tif"))
velocity_restored_0106 <- raster(file.path(v_path, "Restored_0106_velocity.tif"))
velocity_restored_0805 <- raster(file.path(v_path, "Restored_0805_velocity.tif"))

# Set all 0-cells to NA ---------------------------------------------------
velocity_impaired_0106[velocity_impaired_0106 == 0] <- NA
velocity_impaired_0805[velocity_impaired_0805 == 0] <- NA
velocity_restored_0106[velocity_restored_0106 == 0] <- NA
velocity_restored_0805[velocity_restored_0805 == 0] <- NA


# Create a mask of non-NA values with all Q's ----------------------------------
mask_impaired_0106 <- !is.na(velocity_impaired_0106)
mask_impaired_0805 <- !is.na(velocity_impaired_0805)
mask_restored_0106 <- !is.na(velocity_restored_0106)
mask_restored_0805 <- !is.na(velocity_restored_0805)

# clip raster extend 
velocity_impaired_0106 <- terra::crop(velocity_impaired_0106, mask_impaired_0106)
velocity_impaired_0805 <- terra::crop(velocity_impaired_0805, mask_impaired_0805)

velocity_restored_0106 <- terra::crop(velocity_restored_0106, mask_restored_0106)
velocity_restored_0805 <- terra::crop(velocity_restored_0805, mask_restored_0805)
```

## c. Clip Raster Depth
```{r}
# create clipped raster for every layer 
clipped_restored_0106 <- crop(depth_restored_0106, velocity_restored_0106)
clipped_restored_0805 <- crop(depth_restored_0805, velocity_restored_0805)

clipped_impaired_0106 <- crop(depth_impaired_0106, velocity_impaired_0106)
clipped_impaired_0805 <- crop(depth_impaired_0805, velocity_impaired_0805)

# check for differences
extent(clipped_restored_0106)[]-extent(velocity_restored_0106)[]
extent(clipped_restored_0805)[]-extent(velocity_restored_0805)[]

extent(clipped_impaired_0106)[]-extent(velocity_impaired_0106)[]
extent(clipped_impaired_0805)[]-extent(velocity_impaired_0805)[]

# define new rasters
clip_depth_restored_0106 <- raster(vals=values(clipped_restored_0106),ext=extent(velocity_restored_0106),crs=crs(velocity_restored_0106),nrows=dim(velocity_restored_0106)[1],ncols=dim(velocity_restored_0106)[2])

clip_depth_restored_0805 <- raster(vals=values(clipped_restored_0805),ext=extent(velocity_restored_0805),crs=crs(velocity_restored_0805),nrows=dim(velocity_restored_0805)[1],ncols=dim(velocity_restored_0805)[2])

clip_depth_impaired_0106 <- raster(vals=values(clipped_impaired_0106),ext=extent(velocity_impaired_0106),crs=crs(velocity_impaired_0106),nrows=dim(velocity_impaired_0106)[1],ncols=dim(velocity_impaired_0106)[2])

clip_depth_impaired_0805 <- raster(vals=values(clipped_impaired_0805),ext=extent(velocity_impaired_0805),crs=crs(velocity_impaired_0805),nrows=dim(velocity_impaired_0805)[1],ncols=dim(velocity_impaired_0805)[2])

# set all negative values in velocity rasters to NA 
velocity_restored_0106[velocity_restored_0106 < 0] <- NA
velocity_restored_0805[velocity_restored_0805 < 0] <- NA
velocity_impaired_0106[velocity_impaired_0106 < 0] <- NA
velocity_impaired_0805[velocity_impaired_0805 < 0] <- NA

# mask rasters 
depth_restored_0106 <- mask(clip_depth_restored_0106, velocity_restored_0106)
depth_restored_0805 <- mask(clip_depth_restored_0805, velocity_restored_0805)
depth_impaired_0106 <- mask(clip_depth_impaired_0106, velocity_impaired_0106)
depth_impaired_0805 <- mask(clip_depth_impaired_0805, velocity_impaired_0805)
```

# 2. Habitat modelling 
## a. Suitability Curves 
```{r}
# Read suitability curves 
### WATER DEPTH ### ----------------------------------------------------
## HABBY Barbus adult ----------------------------------------------------
depth_barbus_path <- "Suitability_Curves_Data/RSE_Gw_HABBY/Barbus_barbus_adult_water_depth.csv" 
depth_barbus <- read.csv(depth_barbus_path, sep=";", dec=".", header = TRUE)

## HABBY Rhithrogena ----------------------------------------------------
depth_rhithrogena_path <- "Suitability_Curves_Data/Rhithrogena/HABBY_Rhitrogena_eaton_larva_depth.csv" 
depth_rhithrogena <- read.csv(depth_rhithrogena_path, sep=";", dec=".", header = TRUE)

### VELOCITY ### ----------------------------------------------------
# HABBY Barbus adult ----------------------------------------------------
v_barbus_path <- "Suitability_Curves_Data/RSE_Gw_HABBY/Barbus_barbus_adult_velocity.csv" 
v_barbus <- read.csv(v_barbus_path, sep=";", dec=".", header = TRUE)
# head(PK_FG)

## HABBY Rhithrogena ----------------------------------------------------
v_rhithrogena_path <- "Suitability_Curves_Data/Rhithrogena/HABBY_Rhithrogena_eaton_larva_velocity.csv" 
v_rhithrogena <- read.csv(v_rhithrogena_path, sep=";", dec=".", header = TRUE)
```

```{r}
# Plot suitability curves 
### WATER DEPTH ### ----------------------------------------------------
# Tanno 2012 Rhithrogena ----------------------------------------------------
plot(approxfun(depth_barbus$depth, depth_barbus$suitability, method = "linear", rule = 2), xlim = c(0,1.5), 
     main = "HABBY: Barbus barbus", col = "black",  lty = 1, lwd = 2, 
     xlab = "Depth [m]", ylab = "HS [-]")

### VELOCITY ### ----------------------------------------------------
# Tanno 2012 Rhithrogena ----------------------------------------------------
plot(approxfun(v_barbus$velocity, v_barbus$suitability, method = "linear", rule = 2), xlim = c(0,1.5), 
     main = "HABBY: Barbus barbus", col = "black",  lty = 1, lwd = 2, 
     xlab = "Velocity [m/s]", ylab = "HS [-]")
```


## b. Univariate HM 
### b1. water depth
```{r}
### WATER DEPTH ###
# functions to calculate HM -------------------------------------------
univariat_wd_barbus <- function(x, y = depth_barbus$depth, z = depth_barbus$suitability){
  calc(x, fun = approxfun(y, z, rule = 2))
}

univariat_wd_rhithr <- function(x, y = depth_rhithrogena$depth..m., z = depth_rhithrogena$Abundance){
  calc(x, fun = approxfun(y, z, rule = 2))
}

# ALL scenarios ----------------------------------------------------
HS_barbus_depth_impaired_0106 <- univariat_wd_barbus(depth_impaired_0106)
HS_barbus_depth_impaired_0805 <- univariat_wd_barbus(depth_impaired_0805)

HS_barbus_depth_restored_0106 <- univariat_wd_barbus(depth_restored_0106)
HS_barbus_depth_restored_0805 <- univariat_wd_barbus(depth_restored_0805)

HS_rhithrogena_depth_impaired_0106 <- univariat_wd_rhithr(depth_impaired_0106)
HS_rhithrogena_depth_impaired_0805 <- univariat_wd_rhithr(depth_impaired_0805)

HS_rhithrogena_depth_restored_0106 <- univariat_wd_rhithr(depth_restored_0106)
HS_rhithrogena_depth_restored_0805 <- univariat_wd_rhithr(depth_restored_0805)


# set coordinate system (crs) -------------------------------------------
crs(HS_barbus_depth_impaired_0106) <- "+proj=longlat"
crs(HS_barbus_depth_impaired_0805) <- "+proj=longlat"

crs(HS_barbus_depth_restored_0106) <- "+proj=longlat"
crs(HS_barbus_depth_restored_0805) <- "+proj=longlat"

crs(HS_rhithrogena_depth_impaired_0106) <- "+proj=longlat"
crs(HS_rhithrogena_depth_impaired_0805) <- "+proj=longlat"

crs(HS_rhithrogena_depth_restored_0106) <- "+proj=longlat"
crs(HS_rhithrogena_depth_restored_0805) <- "+proj=longlat"

# save as .tif -------------------------------------------
writeRaster(HS_barbus_depth_impaired_0106, filename="results_univariate/HS_barbus_depth_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_barbus_depth_impaired_0805, filename="results_univariate/HS_barbus_depth_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_barbus_depth_restored_0106, filename="results_univariate/HS_barbus_depth_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_barbus_depth_restored_0805, filename="results_univariate/HS_barbus_depth_restored_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_depth_impaired_0106, filename="results_univariate/HS_rhithrogena_depth_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_rhithrogena_depth_impaired_0805, filename="results_univariate/HS_rhithrogena_depth_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_depth_restored_0106, filename="results_univariate/HS_rhithrogena_depth_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_rhithrogena_depth_restored_0805, filename="results_univariate/HS_rhithrogena_depth_restored_0805.tif", format="GTiff", overwrite=TRUE)
```

### b2. velocity
```{r}
### VELOCITY ###
# functions to calculate HM -------------------------------------------
univariat_v_barbus <- function(x, y = v_barbus$velocity, z = v_barbus$suitability){
  calc(x, fun = approxfun((y), z, rule = 2))
}

univariat_v_rhithr <- function(x, y = v_rhithrogena$Velocity..m.s., z = v_rhithrogena$Abundance){
  calc(x, fun = approxfun((y), z, rule = 2))
}


# ALL scenarios ------------------------------------------------------
HS_barbus_v_impaired_0106 <- univariat_v_barbus(velocity_impaired_0106)
HS_barbus_v_impaired_0805 <- univariat_v_barbus(velocity_impaired_0805)

HS_barbus_v_restored_0106 <- univariat_v_barbus(velocity_restored_0106)
HS_barbus_v_restored_0805 <- univariat_v_barbus(velocity_restored_0805)

HS_rhithrogena_v_impaired_0106 <- univariat_v_rhithr(velocity_impaired_0106)
HS_rhithrogena_v_impaired_0805 <- univariat_v_rhithr(velocity_impaired_0805)

HS_rhithrogena_v_restored_0106 <- univariat_v_rhithr(velocity_restored_0106)
HS_rhithrogena_v_restored_0805 <- univariat_v_rhithr(velocity_restored_0805)


# Koordinatensystem (crs) -------------------------------------------
crs(HS_barbus_v_impaired_0106) <- "+proj=longlat"
crs(HS_barbus_v_impaired_0805) <- "+proj=longlat"

crs(HS_barbus_v_restored_0106) <- "+proj=longlat"
crs(HS_barbus_v_restored_0805) <- "+proj=longlat"

crs(HS_rhithrogena_v_impaired_0106) <- "+proj=longlat"
crs(HS_rhithrogena_v_impaired_0805) <- "+proj=longlat"

crs(HS_rhithrogena_v_restored_0106) <- "+proj=longlat"
crs(HS_rhithrogena_v_restored_0805) <- "+proj=longlat"


# save as .tif -------------------------------------------
writeRaster(HS_barbus_v_impaired_0106, filename="results_univariate/HS_barbus_v_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_barbus_v_impaired_0805, filename="results_univariate/HS_barbus_v_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_barbus_v_restored_0106, filename="results_univariate/HS_barbus_v_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_barbus_v_restored_0805, filename="results_univariate/HS_barbus_v_restored_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_v_impaired_0106, filename="results_univariate/HS_rhithrogena_v_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_rhithrogena_v_impaired_0805, filename="results_univariate/HS_rhithrogena_v_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(HS_rhithrogena_v_restored_0106, filename="results_univariate/HS_rhithrogena_v_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(HS_rhithrogena_v_restored_0805, filename="results_univariate/HS_rhithrogena_v_restored_0805.tif", format="GTiff", overwrite=TRUE)
```


## c. GHSI Habitateignungsindex
```{r}
### GHSI ###
# function to calculate GHSI -------------------------------------------
ghsi_2 <- function(x, y){
  overlay(x, y, 
          sub, fun = return(sqrt(x^2*y^2)))
}

# All scenarios ------------------------------------------------------
GHSI_barbus_impaired_0106 <- ghsi_2(HS_barbus_depth_impaired_0106, HS_barbus_v_impaired_0106)
GHSI_barbus_impaired_0805 <- ghsi_2(HS_barbus_depth_impaired_0805, HS_barbus_v_impaired_0805)

GHSI_barbus_restored_0106 <- ghsi_2(HS_barbus_depth_restored_0106, HS_barbus_v_restored_0106)
GHSI_barbus_restored_0805 <- ghsi_2(HS_barbus_depth_restored_0805, HS_barbus_v_restored_0805)

GHSI_rhithrogena_impaired_0106 <- ghsi_2(HS_rhithrogena_depth_impaired_0106, HS_rhithrogena_v_impaired_0106)
GHSI_rhithrogena_impaired_0805 <- ghsi_2(HS_rhithrogena_depth_impaired_0805, HS_rhithrogena_v_impaired_0805)

GHSI_rhithrogena_restored_0106 <- ghsi_2(HS_rhithrogena_depth_restored_0106, HS_rhithrogena_v_restored_0106)
GHSI_rhithrogena_restored_0805 <- ghsi_2(HS_rhithrogena_depth_restored_0805, HS_rhithrogena_v_restored_0805)


# save as .tif -------------------------------------------
writeRaster(GHSI_barbus_impaired_0106, filename="results_multivariate/GHSI_barbus_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_barbus_impaired_0805, filename="results_multivariate/GHSI_barbus_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_barbus_restored_0106, filename="results_multivariate/GHSI_barbus_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_barbus_restored_0805, filename="results_multivariate/GHSI_barbus_restored_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_rhithrogena_impaired_0106, filename="results_multivariate/GHSI_rhithrogena_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_rhithrogena_impaired_0805, filename="results_multivariate/GHSI_rhithrogena_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_rhithrogena_restored_0106, filename="results_multivariate/GHSI_rhithrogena_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_rhithrogena_restored_0805, filename="results_multivariate/GHSI_rhithrogena_restored_0805.tif", format="GTiff", overwrite = TRUE)
```

## d. GHSI classes 
```{r}
# Define the reclassification table ---------------------------------------
reclass_table <- c(0, 0.1, 1, 
                   0.1, 0.4, 2,
                   0.4, 0.7, 3,
                   0.7, 1.0, 4)

# reclass_table <- c(0, 0.1, "poor", 
    #               0.1, 0.4, "low",
     #              0.4, 0.7, "medium",
      #             0.7, 1.0, "high")

# Classify rasters (include.lowest = TRUE includes 0 m/s, which will be also classified as 1) ---------------------------------------
GHSI_classes_barbus_impaired_0106 <- reclassify(GHSI_barbus_impaired_0106, reclass_table,  include.lowest = TRUE)
GHSI_classes_barbus_impaired_0805 <- reclassify(GHSI_barbus_impaired_0805, reclass_table,  include.lowest = TRUE)

GHSI_classes_barbus_restored_0106 <- reclassify(GHSI_barbus_restored_0106, reclass_table,  include.lowest = TRUE)
GHSI_classes_barbus_restored_0805 <- reclassify(GHSI_barbus_restored_0805, reclass_table,  include.lowest = TRUE)

GHSI_classes_rhithrogena_impaired_0106 <- reclassify(GHSI_rhithrogena_impaired_0106, reclass_table,  include.lowest = TRUE)
GHSI_classes_rhithrogena_impaired_0805 <- reclassify(GHSI_rhithrogena_impaired_0805, reclass_table,  include.lowest = TRUE)

GHSI_classes_rhithrogena_restored_0106 <- reclassify(GHSI_rhithrogena_restored_0106, reclass_table,  include.lowest = TRUE)
GHSI_classes_rhithrogena_restored_0805 <- reclassify(GHSI_rhithrogena_restored_0805, reclass_table,  include.lowest = TRUE)

# save as .tif -------------------------------------------
writeRaster(GHSI_classes_barbus_impaired_0106, filename="results_multivariate/GHSI_classes_barbus_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_classes_barbus_impaired_0805, filename="results_multivariate/GHSI_classes_barbus_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_barbus_restored_0106, filename="results_multivariate/GHSI_classes_barbus_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_classes_barbus_restored_0805, filename="results_multivariate/GHSI_classes_barbus_restored_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_rhithrogena_impaired_0106, filename="results_multivariate/GHSI_classes_rhithrogena_impaired_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_classes_rhithrogena_impaired_0805, filename="results_multivariate/GHSI_classes_rhithrogena_impaired_0805.tif", format="GTiff", overwrite=TRUE)

writeRaster(GHSI_classes_rhithrogena_restored_0106, filename="results_multivariate/GHSI_classes_rhithrogena_restored_0106.tif", format="GTiff", overwrite=TRUE)
writeRaster(GHSI_classes_rhithrogena_restored_0805, filename="results_multivariate/GHSI_classes_rhithrogena_restored_0805.tif", format="GTiff", overwrite=TRUE)
```

# 3. Post-processing
## a. Weigthed Usable Area [m2]
```{r}
# define function for WUA calculation -----------------------------------
wua <- function(x){
  cellStats(x, 'sum') * 4
}

# calculate WUA for all Q's -----------------------------------
WUA_barbus_impaired_0106 <- wua(GHSI_barbus_impaired_0106)
WUA_barbus_impaired_0805 <- wua(GHSI_barbus_impaired_0805)

WUA_barbus_restored_0106 <- wua(GHSI_barbus_restored_0106)
WUA_barbus_restored_0805 <- wua(GHSI_barbus_restored_0805)

WUA_rhithrogena_impaired_0106 <- wua(GHSI_rhithrogena_impaired_0106)
WUA_rhithrogena_impaired_0805 <- wua(GHSI_rhithrogena_impaired_0805)

WUA_rhithrogena_restored_0106 <- wua(GHSI_rhithrogena_restored_0106)
WUA_rhithrogena_restored_0805 <- wua(GHSI_rhithrogena_restored_0805)
```

## b. frequency tables
```{r}
# Erstelle Haeufigkeitstabelle 
# Tanno 2012: Rhithrogena -------------------------------------------
freq_table <- function(x){
 as.data.frame(freq(x, digit=1, useNA= "no"))
}

# All scenarios ------------------------------------------------------
freq_GHSI_barbus_impaired_0106 <- freq_table(GHSI_barbus_impaired_0106)
freq_GHSI_barbus_impaired_0805 <- freq_table(GHSI_barbus_impaired_0805)

freq_GHSI_barbus_restored_0106 <- freq_table(GHSI_barbus_restored_0106)
freq_GHSI_barbus_restored_0805 <- freq_table(GHSI_barbus_restored_0805)

freq_GHSI_rhithrogena_impaired_0106 <- freq_table(GHSI_rhithrogena_impaired_0106)
freq_GHSI_rhithrogena_impaired_0805 <- freq_table(GHSI_rhithrogena_impaired_0805)

freq_GHSI_rhithrogena_restored_0106 <- freq_table(GHSI_rhithrogena_restored_0106)
freq_GHSI_rhithrogena_restored_0805 <- freq_table(GHSI_rhithrogena_restored_0805)
```

## c. Wetted Area [m2]
```{r}
# Only for one species, as WA_tot is the same for every species
# define function for WA_tot calculation -----------------------------------
wa_tot <- function(x, column_name){
  sum(x[[column_name]]) * 4
}


# calculate feq_table for all Q's -----------------------------------
WA_barbus_impaired_0106 <- wa_tot(freq_GHSI_barbus_impaired_0106, column_name = "count")
WA_barbus_impaired_0805 <- wa_tot(freq_GHSI_barbus_impaired_0805, column_name = "count")


WA_barbus_restored_0106 <- wa_tot(freq_GHSI_barbus_restored_0106, column_name = "count")
WA_barbus_restored_0805 <- wa_tot(freq_GHSI_barbus_restored_0805, column_name = "count")

WA_rhithrogena_impaired_0106 <- wa_tot(freq_GHSI_rhithrogena_impaired_0106, column_name = "count")
WA_rhithrogena_impaired_0805 <- wa_tot(freq_GHSI_rhithrogena_impaired_0805, column_name = "count")

WA_rhithrogena_restored_0106 <- wa_tot(freq_GHSI_rhithrogena_restored_0106, column_name = "count")
WA_rhithrogena_restored_0805 <- wa_tot(freq_GHSI_rhithrogena_restored_0805, column_name = "count")
```

## d. make dataframe and .csv of calculated indices 
```{r}
# Generate a sequence of dates
june <- as.POSIXct("06-01", format = "%m%d", tz = "UTC")
may <- as.POSIXct("05-08", format = "%m%d", tz = "UTC")

# data frame WUA and HHS -------------------------------------------
results <- data.frame(Description = c("Barbus_impaired", "Barbus_impaired", "Barbus_restored", "Barbus_restored", "Rhithrogena_impaired", "Rhithrogena_impaired", "Rhithrogena_restored", "Rhithrogena_restored"), 
                      Date = as.POSIXct(june, may, june, may, june, may, june, may),
                      Discharge = c(20.5, 19, 20.5, 19, 20.5, 19, 20.5, 19),
                      WUA = c(WUA_barbus_impaired_0106, WUA_barbus_impaired_0805, WUA_barbus_restored_0106, WUA_barbus_restored_0805, WUA_rhithrogena_impaired_0106, WUA_rhithrogena_impaired_0805, WUA_rhithrogena_restored_0106, WUA_rhithrogena_restored_0805), 
                      WA = c(WA_barbus_impaired_0106, WA_barbus_impaired_0805, WA_barbus_restored_0106, WA_barbus_restored_0805, WA_rhithrogena_impaired_0106, WA_rhithrogena_impaired_0805, WA_rhithrogena_restored_0106, WA_rhithrogena_restored_0805))

# write data frame into .csv file -------------------------------------------
write.csv(results, file = "results_statistics/Results_Multivariate_Habitat_Model.csv", row.names = FALSE)
```

## e. plot results 
```{r}
library("readr")
library("tidyr")
library("dplyr")
library("ggplot2")
# make data frame for plotting -------------------------------------------
WUA_HHS <- read_delim("results_statistics/Results_Multivariate_Habitat_Model.csv")

WA <- WUA_HHS[c(1:4), c(1,3,5)]

# Plot WUA ALL  -----------------------------------
WUA_results <- ggplot(WUA_HHS, aes(Discharge, WUA, col = Description)) +
  geom_point(size = 2) +
  geom_line(lwd = 0.8) +
  labs(title = "Comparing Weighted Usable Area (WUA)", x = expression(paste("Discharge [", m^3/s, "]")), y = "WUA", col = "Species") +
  theme_minimal() +
  scale_color_manual(values = c("steelblue1", "steelblue4", "orange2", "tan3"),
    labels = c("Barbel: Impaired", "Barbel: Restored", "Mayfly: Impaired", "Mayfly: Restored")) +
  theme(plot.title = element_text(size = 20), axis.title = element_text(size = 18), legend.title = element_text(size = 18),
               legend.text = element_text(size = 16), axis.text = element_text(size = 16))


WA_results <- ggplot(WA, aes(Discharge, WA, col = Description)) +
  geom_point(size = 2) +
  geom_line(lwd = 0.8) +
  labs(title = "Comparing Wetted Area (WA)", x = expression(paste("Discharge [", m^3/s, "]")), y = expression(paste("WA [", m^2,"]")), col = "Species") +
  theme_minimal() +
  scale_color_manual(values = c("steelblue1", "orange2"),
    labels = c("Impaired", "Restored")) +
  theme(plot.title = element_text(size = 20), axis.title = element_text(size = 18), legend.title = element_text(size = 18),
               legend.text = element_text(size = 16), axis.text = element_text(size = 16))
```

```{r}
# save plots into .png
# set the dimensions of the quadrat
quadrat_width <- 15 # in cm
quadrat_height <- 15 # in cm

# WUA 
ggsave(filename = "results_statistics/WUA_results.png",plot = WUA_results, width = 20, height = quadrat_height, units = "cm")

# WA 
ggsave(filename = "results_statistics/WA_results.png",plot = WA_results, width = quadrat_width, height = quadrat_height, units = "cm")
```






